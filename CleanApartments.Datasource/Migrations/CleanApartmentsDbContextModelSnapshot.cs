// <auto-generated />
using System;
using CleanApartments.Datasource.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CleanApartments.Datasource.Migrations
{
    [DbContext(typeof(CleanApartmentsDbContext))]
    partial class CleanApartmentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CleanApartments.Common.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("ApartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.ApartmentCleaningActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApartmentId");

                    b.Property<int?>("CleanerId");

                    b.Property<bool>("HasIssuesToReport");

                    b.Property<string>("Notes");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("CleanerId");

                    b.ToTable("ApartmentCleaningActivities");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("UserGroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.UserGroupAssignment", b =>
                {
                    b.Property<int>("UserGroupAssigmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserGroupId");

                    b.Property<int>("UserId");

                    b.HasKey("UserGroupAssigmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupAssignments");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.Apartment", b =>
                {
                    b.HasOne("CleanApartments.Common.Models.Location", "Location")
                        .WithMany("Apartments")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.ApartmentCleaningActivity", b =>
                {
                    b.HasOne("CleanApartments.Common.Models.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId");

                    b.HasOne("CleanApartments.Common.Models.User", "Cleaner")
                        .WithMany()
                        .HasForeignKey("CleanerId");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.User", b =>
                {
                    b.HasOne("CleanApartments.Common.Models.Location")
                        .WithMany("Cleaners")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("CleanApartments.Common.Models.UserGroupAssignment", b =>
                {
                    b.HasOne("CleanApartments.Common.Models.User")
                        .WithMany("UserGroupAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
